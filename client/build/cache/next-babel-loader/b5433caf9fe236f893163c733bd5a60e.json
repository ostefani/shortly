{"ast":null,"code":"var _jsxFileName = \"/Users/olga/Code/shortly/client/pages/my-links.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport AllLinks from '../containers/AllLinks';\nimport fetchURI from '../lib/fetchURI';\nexport default (() => {\n  const {\n    0: onScroll,\n    1: setOnScroll\n  } = useState(false);\n  const {\n    0: pageNum,\n    1: setPageNum\n  } = useState(1);\n  const {\n    0: links,\n    1: setLinks\n  } = useState([]);\n  const {\n    0: isListEnd,\n    1: setIsListEnd\n  } = useState(false);\n  const {\n    0: isLoading,\n    1: setIsLoading\n  } = useState(false);\n  useEffect(() => {\n    if (onScroll && !isListEnd) {\n      setPageNum(pageNum + 1);\n      setOnScroll(false);\n    }\n  }, [onScroll, isListEnd]);\n  useEffect(() => {\n    const handleScroll = () => {\n      const maxScroll = document.documentElement.scrollHeight - document.documentElement.clientHeight;\n      const currentScroll = document.documentElement.scrollTop;\n\n      if (currentScroll === maxScroll) {\n        setOnScroll(true);\n      }\n    };\n\n    document.addEventListener('scroll', handleScroll);\n    return () => document.removeEventListener('scroll', handleScroll);\n  }, [setOnScroll]);\n\n  const fetchList = async () => {\n    setIsLoading(true);\n    const result = await fetchURI({\n      pageNum\n    });\n    setIsLoading(false);\n\n    if (result.found && result.links.length > 0) {\n      setLinks([...links, ...result.links]);\n    } else if (result.found && result.links.length === 0) {\n      setIsListEnd(true);\n    } else if (result.error || result.message) {\n      // Show modal here\n      console.log(result.error || result.message);\n    }\n  };\n\n  useEffect(() => {\n    if (!isListEnd) {\n      fetchList(pageNum);\n    }\n  }, [fetchURI, pageNum, isListEnd]);\n  return __jsx(AllLinks, {\n    links: links,\n    isLoading: isLoading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 12\n    }\n  });\n});","map":{"version":3,"sources":["/Users/olga/Code/shortly/client/pages/my-links.js"],"names":["React","useEffect","useState","AllLinks","fetchURI","onScroll","setOnScroll","pageNum","setPageNum","links","setLinks","isListEnd","setIsListEnd","isLoading","setIsLoading","handleScroll","maxScroll","document","documentElement","scrollHeight","clientHeight","currentScroll","scrollTop","addEventListener","removeEventListener","fetchList","result","found","length","error","message","console","log"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AAEA,gBAAe,MAAM;AACjB,QAAM;AAAA,OAACC,QAAD;AAAA,OAAWC;AAAX,MAA0BJ,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM;AAAA,OAACK,OAAD;AAAA,OAAUC;AAAV,MAAwBN,QAAQ,CAAC,CAAD,CAAtC;AACA,QAAM;AAAA,OAACO,KAAD;AAAA,OAAQC;AAAR,MAAoBR,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM;AAAA,OAACS,SAAD;AAAA,OAAYC;AAAZ,MAA4BV,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM;AAAA,OAACW,SAAD;AAAA,OAAYC;AAAZ,MAA4BZ,QAAQ,CAAC,KAAD,CAA1C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAII,QAAQ,IAAI,CAACM,SAAjB,EAA4B;AACxBH,MAAAA,UAAU,CAACD,OAAO,GAAG,CAAX,CAAV;AACAD,MAAAA,WAAW,CAAC,KAAD,CAAX;AACH;AACJ,GALQ,EAKN,CAACD,QAAD,EAAWM,SAAX,CALM,CAAT;AAQAV,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMc,YAAY,GAAG,MAAM;AACvB,YAAMC,SAAS,GAAGC,QAAQ,CAACC,eAAT,CAAyBC,YAAzB,GAAwCF,QAAQ,CAACC,eAAT,CAAyBE,YAAnF;AACA,YAAMC,aAAa,GAAGJ,QAAQ,CAACC,eAAT,CAAyBI,SAA/C;;AAEA,UAAID,aAAa,KAAKL,SAAtB,EAAiC;AAC7BV,QAAAA,WAAW,CAAC,IAAD,CAAX;AACH;AACJ,KAPD;;AASAW,IAAAA,QAAQ,CAACM,gBAAT,CAA0B,QAA1B,EAAoCR,YAApC;AACA,WAAO,MAAME,QAAQ,CAACO,mBAAT,CAA6B,QAA7B,EAAuCT,YAAvC,CAAb;AACH,GAZQ,EAYN,CAACT,WAAD,CAZM,CAAT;;AAcA,QAAMmB,SAAS,GAAG,YAAY;AAC1BX,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACA,UAAMY,MAAM,GAAG,MAAMtB,QAAQ,CAAC;AAAEG,MAAAA;AAAF,KAAD,CAA7B;AACAO,IAAAA,YAAY,CAAC,KAAD,CAAZ;;AAEA,QAAIY,MAAM,CAACC,KAAP,IAAgBD,MAAM,CAACjB,KAAP,CAAamB,MAAb,GAAsB,CAA1C,EAA6C;AACzClB,MAAAA,QAAQ,CAAC,CAAC,GAAGD,KAAJ,EAAW,GAAGiB,MAAM,CAACjB,KAArB,CAAD,CAAR;AACH,KAFD,MAGK,IAAIiB,MAAM,CAACC,KAAP,IAAgBD,MAAM,CAACjB,KAAP,CAAamB,MAAb,KAAwB,CAA5C,EAA+C;AAChDhB,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACH,KAFI,MAGA,IAAIc,MAAM,CAACG,KAAP,IAAgBH,MAAM,CAACI,OAA3B,EAAoC;AACrC;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYN,MAAM,CAACG,KAAP,IAAgBH,MAAM,CAACI,OAAnC;AACH;AACJ,GAfD;;AAiBA7B,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAI,CAACU,SAAL,EAAgB;AACZc,MAAAA,SAAS,CAAClB,OAAD,CAAT;AACH;AACJ,GAJQ,EAIN,CAACH,QAAD,EAAWG,OAAX,EAAoBI,SAApB,CAJM,CAAT;AAOA,SAAO,MAAC,QAAD;AAAU,IAAA,KAAK,EAAEF,KAAjB;AAAwB,IAAA,SAAS,EAAEI,SAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACH,CAtDD","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport AllLinks from '../containers/AllLinks';\nimport fetchURI from '../lib/fetchURI';\n\nexport default () => {\n    const [onScroll, setOnScroll] = useState(false);\n    const [pageNum, setPageNum] = useState(1);\n    const [links, setLinks] = useState([]);\n    const [isListEnd, setIsListEnd] = useState(false);\n    const [isLoading, setIsLoading] = useState(false);\n\n    useEffect(() => {\n        if (onScroll && !isListEnd) {\n            setPageNum(pageNum + 1);\n            setOnScroll(false);\n        }\n    }, [onScroll, isListEnd]);\n\n\n    useEffect(() => {\n        const handleScroll = () => {\n            const maxScroll = document.documentElement.scrollHeight - document.documentElement.clientHeight;\n            const currentScroll = document.documentElement.scrollTop;\n\n            if (currentScroll === maxScroll) {\n                setOnScroll(true);\n            }\n        };\n\n        document.addEventListener('scroll', handleScroll);\n        return () => document.removeEventListener('scroll', handleScroll);\n    }, [setOnScroll]);\n\n    const fetchList = async () => {\n        setIsLoading(true);\n        const result = await fetchURI({ pageNum });\n        setIsLoading(false);\n\n        if (result.found && result.links.length > 0) {\n            setLinks([...links, ...result.links]);\n        }\n        else if (result.found && result.links.length === 0) {\n            setIsListEnd(true);\n        }\n        else if (result.error || result.message) {\n            // Show modal here\n            console.log(result.error || result.message);\n        }\n    };\n\n    useEffect(() => {\n        if (!isListEnd) {\n            fetchList(pageNum);\n        }\n    }, [fetchURI, pageNum, isListEnd]);\n\n\n    return <AllLinks links={links} isLoading={isLoading} />;\n};\n"]},"metadata":{},"sourceType":"module"}